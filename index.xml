<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nothing to see here</title><link>http://basbossink.github.io/</link><description>Recent content on Nothing to see here</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© Bas Bossink</copyright><lastBuildDate>Sat, 18 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://basbossink.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Quick Powershell tip concerning Out-String and Send-MailMessage</title><link>http://basbossink.github.io/posts/2011-03-12-send-mail-message-out-string-tip/</link><pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate><guid>http://basbossink.github.io/posts/2011-03-12-send-mail-message-out-string-tip/</guid><description>Recently I wrote a script at work to generate a report about the load on a set of servers. The gathered statistics were mailed around everything nice and dandy. But after a few weeks something strange happened the body of the mail message containing a nice table got turned into gibberish.
Cause I really didn&amp;rsquo;t understand want went wrong all of a sudden, so I started to inspect the output of the script.</description></item><item><title>About</title><link>http://basbossink.github.io/about/</link><pubDate>Tue, 07 Jun 2022 00:00:00 +0000</pubDate><guid>http://basbossink.github.io/about/</guid><description>My name is Bas Bossink, I&amp;rsquo;m a software developer with an interest in creating high quality software in demanding domains, such as optimization and high precision machines. My goal is to be a top of the bill software architect who can give the good example.
Specialties: C#, .NET, functional programming, PowerShell Learning: Rust, compassion See my LinkedIn profile or GitHub account to get to know me a little better, if you wish.</description></item><item><title>Projects</title><link>http://basbossink.github.io/projects/</link><pubDate>Tue, 07 Jun 2022 00:00:00 +0000</pubDate><guid>http://basbossink.github.io/projects/</guid><description>sun Stand-Up Notebook (sun for short), is a very simple note taking command-line application to save you from drawing a blank during stand-up meetings.
rpn A command-line reverse polish notation calculator, written in Rust see the Github Repository for details.
presentations A set of presentations given by the me released under the Creative Commons Attribution 3.0 Netherlands License.</description></item><item><title>RPN calculator in Rust</title><link>http://basbossink.github.io/posts/2022-06-06-rpn-rust/</link><pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate><guid>http://basbossink.github.io/posts/2022-06-06-rpn-rust/</guid><description>Since I&amp;rsquo;m now a Rust developer by day, I&amp;rsquo;m trying to flatten my learning curve by using Rust for pet/learning projects. Trying to pick a task small enough to learn and looking for a calculator that is usable directly from the command-line, I didn&amp;rsquo;t find anything I liked that was really simple. I&amp;rsquo;m aware of calculators like bc(1), dc(1), kalker and of course calc in Emacs. All of these are extraordinary in their own right.</description></item><item><title>Rising sun</title><link>http://basbossink.github.io/posts/2021-11-21-rising-sun/</link><pubDate>Sun, 21 Nov 2021 00:00:00 +0000</pubDate><guid>http://basbossink.github.io/posts/2021-11-21-rising-sun/</guid><description>Recently my interest in the Go programming language changed from dormant back to active. Being a .NET developer by day and frankly getting new feature fatigue. I was drawn to a simpler world. I studied Go in the past using e.g. exercism and watching every Rob Pike youtube video I could find. I brushed up on what I learned before and found that with the introduction of Go modules, life improved quite a bit.</description></item><item><title>Running with the devil</title><link>http://basbossink.github.io/posts/2014-03-23-running-with-the-devil/</link><pubDate>Sun, 23 Mar 2014 00:00:00 +0000</pubDate><guid>http://basbossink.github.io/posts/2014-03-23-running-with-the-devil/</guid><description>This blog has been dormant for quite some time. But I would like to take this oppertunity to promote a special site that has stolen my heart over the last couple of weeks. It is a tool for learning that runs with the devil. The site I&amp;rsquo;m talking about is exercism.io, to quote their byline:
Crowd-sourced code reviews on daily practice problems.
The site is currently in public beta, but I have not seen any problems with it yet.</description></item><item><title>PS for .NET devs part 5: Extending Visual Studio using StudioShell</title><link>http://basbossink.github.io/posts/2011-12-19-ps4.netdevs-5-extending-vs/</link><pubDate>Mon, 19 Dec 2011 00:00:00 +0000</pubDate><guid>http://basbossink.github.io/posts/2011-12-19-ps4.netdevs-5-extending-vs/</guid><description>In a previous post I showed how to extract all targets defined in a given MSBuild file. Wouldn&amp;rsquo;t it be great if the execution of those targets could be performed directly from within Visual Studio. Building on PowerShell and StudioShell this becomes trivial.
PowerShell Hosts in Visual Studio Looking in the Visual Studio Extension Manager you find a number of extensions that offer PowerShell related functionality for Visual Studio, below I&amp;rsquo;ll briefly describe them:</description></item><item><title>PS for .NET devs part 4: Source digging</title><link>http://basbossink.github.io/posts/2011-12-04-ps4.netdevs-4-source-digging/</link><pubDate>Sun, 04 Dec 2011 00:00:00 +0000</pubDate><guid>http://basbossink.github.io/posts/2011-12-04-ps4.netdevs-4-source-digging/</guid><description>The kind of adhoc scripting you can do with PowerShell lends it&amp;rsquo;s self very well for getting an overview of the code-base you find yourself in. When you find yourself in a project or you&amp;rsquo;re just interested in some basic statistics/metrics about your code-base you could follow something like the path I&amp;rsquo;m about to uncover. For brevity and a real life flavor I&amp;rsquo;m using the short form aliases of the Cmdlets look them up with Get-Alias if you find any that are unfamiliar.</description></item><item><title>PS for .NET devs part 3: List Targets in your MSBuild file</title><link>http://basbossink.github.io/posts/2011-11-19-ps4.netdevs-3-list-targets/</link><pubDate>Sat, 19 Nov 2011 00:00:00 +0000</pubDate><guid>http://basbossink.github.io/posts/2011-11-19-ps4.netdevs-3-list-targets/</guid><description>The project I&amp;rsquo;m currently working on, started more than five years ago and has quite a large MSBuild file to perform all the build automation for the project. A while back I found myself struggling to remember the name of a specific build Target that I don&amp;rsquo;t use very often. Since such a large XML file is not as readable as one would hope I couldn&amp;rsquo;t find what I was looking for fast enough.</description></item><item><title>PS for .NET devs part 2: Comparing the PowerShell language to C#</title><link>http://basbossink.github.io/posts/2011-11-14-ps4.netdevs-2-powershell-syntax/</link><pubDate>Mon, 14 Nov 2011 00:00:00 +0000</pubDate><guid>http://basbossink.github.io/posts/2011-11-14-ps4.netdevs-2-powershell-syntax/</guid><description>In my previous posts in this series I discussed why you should care about PowerShell and I pointed to some resources to help you get started with PowerShell. This post will describe the syntax of the PowerShell language by comparing it with the syntax of C#. Recently the PowerShell language specification was released under the community promise, so if you want to learn everything there is to know about the PowerShell language look it up.</description></item><item><title>PS for .NET devs part 1: Getting started with PowerShell</title><link>http://basbossink.github.io/posts/2011-06-22-ps4.netdev-1-getting-started-with-powershell/</link><pubDate>Wed, 22 Jun 2011 00:00:00 +0000</pubDate><guid>http://basbossink.github.io/posts/2011-06-22-ps4.netdev-1-getting-started-with-powershell/</guid><description>After getting everybody warmed to the idea of learning PowerShell in part 0 of this series. Let&amp;rsquo;s dig into a couple of ways to get started with PowerShell.
The resource list By now PowerShell has gained so much traction at this moment that I could probably fill several dozen pages with links, pointers to the excellent resources available on-line or in print. However I will refrain myself to a couple starting points.</description></item><item><title>PS for .NET devs part 0: PowerShell what is it and why should I care?</title><link>http://basbossink.github.io/posts/2011-06-19-ps4.netdevs-0-what-and-why/</link><pubDate>Sun, 19 Jun 2011 00:00:00 +0000</pubDate><guid>http://basbossink.github.io/posts/2011-06-19-ps4.netdevs-0-what-and-why/</guid><description>Being a big PowerShell fan but not seeing many fellow developers around me use it, I thought PowerShell could use some promotion among .NET developers. This inspired me to start a series of blog posts showing the great stuff PowerShell has to offer .NET developers. The outline I have defined up to now looks like this:
Getting started with PowerShell PowerShell as a better shell The syntax of the PowerShell language Listing the Targets in your MSBuild file Getting an overview of your code-base Shutting down the pesky virus scanner with WMI events Looking into your MongoDB data with PowerShell Freeing yourself from xml build languages with psake Testing your .</description></item><item><title>Generated Stack Overflow flair in text</title><link>http://basbossink.github.io/posts/2011-01-25-images-removed/</link><pubDate>Tue, 25 Jan 2011 00:00:00 +0000</pubDate><guid>http://basbossink.github.io/posts/2011-01-25-images-removed/</guid><description>Those of you who&amp;rsquo;ve visited here before would have noticed the list of badges in the right column. These were the standard badges you can find all around the internet. Looking at the output of Pingdom, YSlow and WebSiteOptimization.com I decided that removing a number of images from the site would improve the load time. Furthermore FriendFeed seemed to be having performance problems of their own. Since I&amp;rsquo;m not a heavy FriendFeed user I decided to remove the badge entirely.</description></item><item><title>Adding comments</title><link>http://basbossink.github.io/posts/2011-01-19-adding-comments/</link><pubDate>Wed, 19 Jan 2011 00:00:00 +0000</pubDate><guid>http://basbossink.github.io/posts/2011-01-19-adding-comments/</guid><description>In my last post I hinted that the next feature to be implemented was a comments facility. Searching through the web I found two options Disqus and IntenseDebate. Browsing through their respective sites, I liked Disqus better. Judging by a few comparisons I found here and here, and the fact that gitready uses Disqus. Disqus scored best in my comparison. Their registration process also was a lot less labor intensive. Adding the code to the site was also trivial.</description></item><item><title>Combining Jekyll, Haml and Sass with GitHub Pages</title><link>http://basbossink.github.io/posts/2011-01-16-blog-setup/</link><pubDate>Sun, 16 Jan 2011 00:00:00 +0000</pubDate><guid>http://basbossink.github.io/posts/2011-01-16-blog-setup/</guid><description>Using Git introduced me to the wonderful services of GitHub. One of the many great features of GitHub is something known as GitHub Pages. To quote the GitHub Pages intro:
The GitHub Pages feature allows you to publish content to the web by simply pushing content to one of your GitHub hosted repositories. You can use GitHub Pages for the website of your project or as a &amp;lsquo;User Page&amp;rsquo;. GitHub uses Git&amp;rsquo;s post-commit hooks, to invoke Jekyll a Ruby based static site generator.</description></item><item><title>NL FP day 2011</title><link>http://basbossink.github.io/posts/2011-01-09-nlfp-day/</link><pubDate>Sun, 09 Jan 2011 00:00:00 +0000</pubDate><guid>http://basbossink.github.io/posts/2011-01-09-nlfp-day/</guid><description>Last Friday I attended the Nederlandse Functioneel Programmeren dag. The program showed a wide variety of short (20 min.) talks. This appeared to be a nice low barrier of entry opportunity to see what&amp;rsquo;s currently hot in the field of functional programming. With the added benefit of being able to talk to people who get to use languages like Haskell, F# on a daily bases instead of in their spare time âº.</description></item></channel></rss>